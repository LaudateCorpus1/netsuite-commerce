// Copyright (c) 2019, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Universal Permissive License v 1.0 as shown at http://oss.oracle.com/licenses/upl.

define('360Images'
, [
    'ProductDetails.ImageGallery.View'
  , 'SC.Configuration'
  , 'Utilities.ResizeImage'

  , 'underscore'
  , 'Utils'

  , 'jquery.reel' // not included with this tutorial
  ]
, function (
    ImageGalleryView
  , Configuration
  , resizeImage

  , _
  , Utils
  )
{
  'use strict';

  _.extend(ImageGalleryView.prototype,
  {
    // We're interjecting when ImageGalleryView loads so that we can update the images object
    initialize: _.wrap(ImageGalleryView.prototype.initialize, function(fn)
    {
      fn.apply(this, _.toArray(arguments).slice(1));
      this.check360();
      console.log('360 Images initialized');
    })

    // We're pulling in the saved data from the configuration file and then checking to see if there are any images that match the configured ones.
    // If there are, we update the images object with the information from the configuration.
  , check360: function()
    {
      var config360 = Configuration.imagesThreeSixty
      , images = this.images;

      for (var i in config360)
      {
        for (var j in images)
        {
          // Does the filename ('name') provided in the config match the end of iteratee's URL?
          if (config360[i].name === images[j].url.split('/').slice(-1).pop())
          {
            // If yes, take all of the configuration data for that entry and add to the object for that file in the images object (as well as mark it as a 360 image).
            _.extend(images[j], config360[i]);
            images[j].is360 = true;
          }
        }
      }
      console.log('360 Images object updated');
    }

    // Starts the jQuery.reel plugin using its own initialization method. It scans for any marked up iamges and then does its thing.
  , init360: function()
    {
      jQuery.reel.scan();
      console.log('360 Reel scanned');
    }

    // Here we're completely replacing the initSlider method with our own.
    // We're doing this because when the image slider is built, we need to add in two callbacks: onSliderLoad and onSlideBefore which will call the initialization method.
    // We can only initialize jQuery.reel once the templates used within the slider has been built and is ready.
    // When you migrate to a newer version of SCA, you'll need to carefully check this code to
  , initSlider: function()
    {
      var self = this;

      if (self.images.length > 1)
      {
        self.$slider = Utils.initBxSlider(self.$('[data-slider]'), {
            buildPager: _.bind(self.buildSliderPager, self)
          , startSlide: 0
          , adaptiveHeight: true
          , touchEnabled: true
          , nextText: '<a class="product-details-image-gallery-next-icon" data-action="next-image"></a>'
          , prevText: '<a class="product-details-image-gallery-prev-icon" data-action="prev-image"></a>'
          , controls: true
          // These
          , onSliderLoad: _.bind(this.init360, this)
          , onSlideBefore: _.bind(this.init360, this)
        });

        self.$('[data-action="next-image"]').off();
        self.$('[data-action="prev-image"]').off();

        self.$('[data-action="next-image"]').click(_.bind(self.nextImageEventHandler, self));
        self.$('[data-action="prev-image"]').click(_.bind(self.previousImageEventHandler, self));
      }

      console.log('Slider initialized');
    }

    // Like the slider initialization function, we're also completely overriding the one for the zoom functionality.
    // The issue that this 'solves' is that we absolutely do not want zoom functionality on 360 images.
    // We *could* remove the template markup that enables this functionality BUT this causes a problem. It makes the zoomed images that this function generates out of sync with the main product images.
    // This is because the script/app assumes that all PDP images should have zoom enabled on them and there's no way to flag them otherwise.
    // Well, until we add some that is.
    // The script progressively scans each element and then generates zoomed versions. Our if statement checks for the class we added in the template just to 360 images; if it finds it, it just ignores it and moves on (instead of doing its business).
  , initZoom: function ()
    {
      if (!SC.ENVIRONMENT.isTouchEnabled)
      {
        var images = this.images
        , self = this;

        this.$('[data-zoom]').each(function (slide_index)
        {
          // This
          // We're using .hasClass() which is a little hacky but feel free to pick whatever you like. Remember that this code is iterating through the *elements* generated by the template, not the images object.
          if (jQuery(this).hasClass('product-details-image-gallery-container-360'))
          {
            console.log('360 image detected - ignoring in zoom');
          } else {
            self.$(this).zoom({
              url: resizeImage(images[slide_index].url, 'zoom')
            , callback: function()
              {
                var $this = self.$(this);

                if ($this.width() <= $this.closest('[data-view="Product.ImageGallery"]').width())
                {
                  $this.remove();
                }

                return this;
              }
            });
          }
        });
      }
    }
  });
});